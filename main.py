from tkinter import *
from torrent_search import *
from PIL import ImageTk, Image
from io import BytesIO

import base64
import gzip

handlers = []


def clicked():
    inp = inputtxt.get(1.0, "end-1c")
    global handlers
    handlers= listar_torrents(inp)
    listbox.delete(0, END)

    for i in range (len(handlers)):
        #titulo_buscar = Label(window, text=lista_handlers[i][0])
        #titulo_buscar.grid(column=1, row=i)
        listbox.insert(END, str(handlers[i][2]) + " | " + str(handlers[i][0]))

def listbox_clicked(event):
    cs = listbox.curselection()
    for list in cs:
        os.startfile(handlers[list][1])

global_offset = 130
x_offset_adjust = 23

# Define a janela
window = Tk()
window.resizable(0,0)
window.title("Captain Frog's Torrent Finder")
window.geometry('800x600')

# Define o termo de busca
titulo_buscar = Label(window, text="Insert search term: ")
titulo_buscar.place(x=10 + x_offset_adjust, y=10 + global_offset, in_=window)

# Define o campo onde recebemos o input
inputtxt = Text(window, height=1, width=50)
inputtxt.place(x=130 + x_offset_adjust, y=13 + global_offset, in_=window)

# Define o bot√£o
btn = Button(window, text="Search!", command=clicked)
btn.place(x=550 + x_offset_adjust, y=9 + global_offset, in_=window)

# Define a listbox
listbox = Listbox(window, height=25, width=120)
listbox.place(x=30, y=50 + global_offset, in_=window)
listbox.bind('<Double-1>', listbox_clicked)

# Define a imagem do sapo

# Sapo.
sapo = """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"""
sapo_png = BytesIO(gzip.decompress(base64.b64decode(sapo)))

frame = Frame(window, width=20, height=10)
frame.pack()
frame.place(x=10 + x_offset_adjust, y=30)

img = ImageTk.PhotoImage(Image.open(sapo_png))
image = Label(frame, image = img)
image.pack()

# Define o t√≠tulo
titulo_sapo = Label(window, text="Captain Frog's Torrent Finder")
titulo_sapo.place(x = 120 + x_offset_adjust, y=10, in_=window)
titulo_sapo.config(font=("Calibri", 20))

# Define o subt√≠tulo

subtitulo_1 = Label(window, text="Please wait a few seconds to see results.")
subtitulo_1.place(x = 120 + x_offset_adjust, y=50, in_=window)

subtitulo_2 = Label(window, text="M - Main results, probably in good health.")
subtitulo_2.place(x = 120 + x_offset_adjust, y=70, in_=window)

subtitulo_3 = Label(window, text="S - Secondary results, could be in good health but probably aren't.")
subtitulo_3.place(x = 120 + x_offset_adjust, y=90, in_=window)

subtitulo_4 = Label(window, text="G - Google search results, useful for niche contents.")
subtitulo_4.place(x = 120 + x_offset_adjust, y=110, in_=window)

window.mainloop()
